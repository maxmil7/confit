{"version":3,"sources":["../../lib/provider.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;IAeO,QAAQ,2BAAM,UAAU;;IACxB,QAAQ,2BAAM,UAAU;;IACxB,MAAM,2BAAM,aAAa;;AAGhC,IAAM,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC;;iBAElB;;AAEX,QAAI,EAAA,gBAAG;AACH,YAAI,MAAM,GAAG,EAAE,CAAC;AAChB,YAAI,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;;;;;;AAE3C,wDAAgB,MAAA,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;oBAAxB,GAAG;;AACR,oBAAI,GAAG,KAAK,GAAG,EAAE;;;;;;;;AAGb,qEAAiB,IAAI,CAAC,CAAC;gCAAd,IAAI;;AACT,kCAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;yBACvB;;;;;;;;;;;;;;;iBACJ,MAAM;AACH,0BAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;iBAC3B;aACJ;;;;;;;;;;;;;;;;AAED,eAAO,MAAM,CAAC;KACjB;;AAED,OAAG,EAAA,aAAC,MAAM,EAAE;AACR,YAAI,MAAM,GAAG,EAAE,CAAC;;;;;;;;;AAIhB,wDAAgB,MAAA,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;oBAA/B,GAAG;;;;AAGR,oBAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;AACzB,0BAAM,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;iBAClC;aACJ;;;;;;;;;;;;;;;;AAED,eAAO,MAAM,CAAC;KACjB;;AAGD,eAAW,EAAA,uBAAG;AACV,YAAI,OAAO,EAAE,GAAG,CAAC;;AAEjB,eAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,aAAa,CAAC;AAChD,WAAG,GAAG,EAAE,CAAC;;AAET,aAAK,sBAAoB,OAAO,CAAG,CAAC;;;;;;;;AAGpC,wDAAoB,MAAA,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;oBAAlC,OAAO;;AACZ,oBAAI,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC9C,uBAAO,GAAG,KAAK,GAAG,OAAO,GAAG,OAAO,CAAC;AACpC,mBAAG,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;aACxB;;;;;;;;;;;;;;;;AAED,aAAK,qBAAmB,OAAO,CAAG,CAAC;;;;;AAKnC,WAAG,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC;AACpB,WAAG,CAAC,GAAG,GAAG,OAAO,CAAC;AAClB,eAAO,EAAE,GAAG,EAAH,GAAG,EAAE,CAAC;KAClB;CACJ","file":"lib/provider.js","sourcesContent":["/*───────────────────────────────────────────────────────────────────────────*\\\n │  Copyright (C) 2016 PayPal                                                 │\n │                                                                            │\n │  Licensed under the Apache License, Version 2.0 (the \"License\");           │\n │  you may not use this file except in compliance with the License.          │\n │  You may obtain a copy of the License at                                   │\n │                                                                            │\n │    http://www.apache.org/licenses/LICENSE-2.0                              │\n │                                                                            │\n │  Unless required by applicable law or agreed to in writing, software       │\n │  distributed under the License is distributed on an \"AS IS\" BASIS,         │\n │  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  │\n │  See the License for the specific language governing permissions and       │\n │  limitations under the License.                                            │\n \\*───────────────────────────────────────────────────────────────────────────*/\nimport minimist from 'minimist';\nimport debuglog from 'debuglog';\nimport Common from './common.js';\n\n\nconst debug = debuglog('confit');\n\nexport default {\n\n    argv() {\n        let result = {};\n        let args = minimist(process.argv.slice(2));\n\n        for (let key of Object.keys(args)) {\n            if (key === '_') {\n                // Since the '_' args are standalone,\n                // just set keys with null values.\n                for (let prop of args._) {\n                    result[prop] = null;\n                }\n            } else {\n                result[key] = args[key];\n            }\n        }\n\n        return result;\n    },\n\n    env(ignore) {\n        let result = {};\n\n        // process.env is not a normal object, so we\n        // need to map values.\n        for (let env of Object.keys(process.env)) {\n            //env:env is decided by process.env.NODE_ENV.\n            //Not allowing process.env.env to override the env:env value.\n            if (ignore.indexOf(env) < 0) {\n                result[env] = process.env[env];\n            }\n        }\n\n        return result;\n    },\n\n\n    convenience() {\n        var nodeEnv, env;\n\n        nodeEnv = process.env.NODE_ENV || 'development';\n        env = {};\n\n        debug(`NODE_ENV set to ${nodeEnv}`);\n\n        // Normalize env and set convenience values.\n        for (let current of Object.keys(Common.env)) {\n            let match = Common.env[current].test(nodeEnv);\n            nodeEnv = match ? current : nodeEnv;\n            env[current] = match;\n        }\n\n        debug(`env:env set to ${nodeEnv}`);\n\n        // Set (or re-set) env:{nodeEnv} value in case\n        // NODE_ENV was not one of our predetermined env\n        // keys (so `config.get('env:blah')` will be true).\n        env[nodeEnv] = true;\n        env.env = nodeEnv;\n        return { env };\n    }\n}\n"]}