{"version":3,"sources":["../../lib/factory.js"],"names":[],"mappings":"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","file":"lib/factory.js","sourcesContent":["/*───────────────────────────────────────────────────────────────────────────*\\\n │  Copyright (C) 2016 PayPal                                                 │\n │                                                                            │\n │  Licensed under the Apache License, Version 2.0 (the \"License\");           │\n │  you may not use this file except in compliance with the License.          │\n │  You may obtain a copy of the License at                                   │\n │                                                                            │\n │    http://www.apache.org/licenses/LICENSE-2.0                              │\n │                                                                            │\n │  Unless required by applicable law or agreed to in writing, software       │\n │  distributed under the License is distributed on an \"AS IS\" BASIS,         │\n │  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  │\n │  See the License for the specific language governing permissions and       │\n │  limitations under the License.                                            │\n \\*───────────────────────────────────────────────────────────────────────────*/\nimport Path from 'path';\nimport shush from 'shush';\nimport debuglog from 'debuglog';\nimport Thing from 'core-util-is';\nimport Config from './config';\nimport Common from './common';\nimport Handlers from './handlers';\nimport Provider from './provider';\n\n\nconst debug = debuglog('confit');\n\nexport default class Factory {\n\n    constructor({ basedir, protocols =  {}, defaults = 'config.json', envignore = []}) {\n        this.envignore = envignore.push('env');\n        this.basedir = basedir;\n        this.protocols = protocols;\n        this.promise = Promise.resolve({})\n            .then(store => Common.merge(Provider.convenience(), store))\n            .then(Factory.conditional(store => {\n                let file = Path.join(this.basedir, defaults);\n                return Handlers.resolveImport(shush(file), this.basedir)\n                    .then(data => Common.merge(data, store));\n            }))\n            .then(Factory.conditional(store => {\n                let file = Path.join(this.basedir, `${store.env.env}.json`);\n                return Handlers.resolveImport(shush(file), this.basedir)\n                    .then(data => Common.merge(shush(file), store));\n            }))\n            .then(store => Common.merge(Provider.env(envignore), store))\n            .then(store => Common.merge(Provider.argv(), store));\n    }\n\n    addDefault(obj) {\n        this._add(obj, (store, data) => Common.merge(store, data));\n        return this;\n    }\n\n    addOverride(obj) {\n        this._add(obj, (store, data) => Common.merge(data, store));\n        return this;\n    }\n\n    create(cb) {\n        this.promise\n            .then(store => Handlers.resolveImport(store, this.basedir))\n            .then(store => Handlers.resolveCustom(store, this.protocols))\n            .then(store => Handlers.resolveConfig(store))\n            .then(store => cb(null, new Config(store)), cb);\n    }\n\n    _add(obj, fn) {\n        let data = this._resolveFile(obj);\n        let handler = Handlers.resolveImport(data, this.basedir);\n        this.promise = this.promise.then(store => handler.then(data => fn(store, data)));\n    }\n\n    _resolveFile(path) {\n        if (Thing.isString(path)) {\n            let file = Common.isAbsolute(path) ? path : Path.join(this.basedir, path);\n            return shush(file);\n        }\n        return path;\n    }\n\n    static conditional(fn) {\n        return function (store) {\n            try {\n                return fn(store);\n            } catch (err) {\n                if (err.code && err.code === 'MODULE_NOT_FOUND') {\n                    debug(`WARNING: ${err.message}`);\n                    return store;\n                }\n                throw err;\n            }\n        }\n    }\n\n}\n"]}